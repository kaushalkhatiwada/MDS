largest_bar <- which.max(h$counts)
y_largest_bar <- h$counts[largest_bar]
# Determine indices of adjacent bars (left and right)
left_bar <- largest_bar - 1
right_adjacent <- largest_bar + 1
# Get x-coordinates of the largest bar and its adjacent bars
x_largest_bar_left <- h$breaks[largest_bar]
x_largest_bar_right <- h$breaks[largest_bar + 1]
x_left_adjacent <- h$breaks[left_bar]
x_right_adjacent <- h$breaks[right_adjacent]
# Calculate y-coordinates of the largest bar and its adjacent bars
y_largest_bar <- h$counts[largest_bar]
y_left_adjacent <- h$counts[left_abar]
y_largest_bar <- h$counts[largest_bar]
# Determine indices of adjacent bars (left and right)
left_adjacent <- largest_bar - 1
right_adjacent <- largest_bar + 1
# Get x-coordinates of the largest bar and its adjacent bars
x_largest_bar_left <- h$breaks[largest_bar]
x_largest_bar_right <- h$breaks[largest_bar + 1]
x_left_adjacent <- h$breaks[left_adjacent]
x_right_adjacent <- h$breaks[right_adjacent]
# Calculate y-coordinates of the largest bar and its adjacent bars
y_largest_bar <- h$counts[largest_bar]
y_left_adjacent <- h$counts[left_adjacent]
y_right_adjacent <- h$counts[right_adjacent]
# Calculate coordinates for the two diagonal lines
# Left diagonal line
x_start_left <- x_largest_bar_left
y_start_left <- y_largest_bar
x_end_left <- x_right_adjacent
y_end_left <- y_right_adjacent
# Right diagonal line
x_start_right <- x_largest_bar_right
y_start_right <- y_largest_bar
x_end_right <- x_left_adjacent
y_end_right <- y_left_adjacent
# Draw the two diagonal lines on the histogram plot
lines(c(x_start_left, x_end_left), c(y_start_left, y_end_left), col = "red", lwd = 2)
lines(c(x_start_right, x_end_right), c(y_start_right, y_end_right), col = "blue", lwd = 2)
# Calculate slopes (m) and y-intercepts (b) of the two lines
slope_left <- (y_end_left - y_start_left) / (x_end_left - x_start_left)
intercept_left <- y_start_left - slope_left * x_start_left
slope_right <- (y_end_right - y_start_right) / (x_end_right - x_start_right)
intercept_right <- y_start_right - slope_right * x_start_right
# Calculate x-coordinate of intersection point (mode)
intersection_x <- (intercept_right - intercept_left) / (slope_left - slope_right)
# Display intersection point (mode)
cat("Intersection Point (Mode) on x-axis:", intersection_x, "\n")
# Draw a vertical dotted line at the mode (intersection point)
abline(v = intersection_x, col = "red", lty = 2)  # Dotted line in red color
hist_data <- hist(aq$Temp)
aq<-data("airquality")
hist_data <- hist(aq$Temp)
aq<- airquality
hist_data <- hist(aq$Temp)
max_freq_index <- which.max(hist_data$counts)
max_freq_index
left_bin <- max_freq_index - 1
left_bin
## [1] 5
right_bin <- max_freq_index + 1
right_bin
x_left1 <- hist_data$breaks[left_bin + 1]
x_left1
x_right1 <- hist_data$breaks[max_freq_index + 1]
x_right1
y_max <- max(hist_data$counts)
y_max
y_left1 <- hist_data$counts[left_bin]
y_right1 <- hist_data$counts[max_freq_index]
#Calculating coordinates for the diagonal line from the edge of the largest bar to the tip of the opposite adjacent bar
plot.new()
hist_data <- hist(aq$Temp)
segments(x_left1, y_left1, x_right1, y_right1, col = "blue")
?segments
x_left1
x_right1
y_left1 <- hist_data$counts[left_bin]
y_left1
x_left1 <- h$breaks[left_bar + 1]
x_right1 <- h$breaks[max_freq_index + 1]
y_max <- max(h$counts)
y_left1 <- h$counts[left_bar]
y_right1 <- h$counts[max_freq_index]
#Calculating coordinates for the diagonal line from the edge of the largest bar to the tip of the opposite adjacent bar
plot.new()
hist_data <- h(aq$Temp)
segments(x_left1, y_left1, x_right1, y_right1, col = "blue")
#Calculating coordinates for the diagonal line from the edge of the largest bar to the tip of the opposite adjacent bar
plot.new()
h <- h(aq$Temp)
h <- hist(aq$Temp)
segments(x_left1, y_left1, x_right1, y_right1, col = "blue")
########### WORK 2 #################
hist(aq_temp, main = "Temperature",col="green",xlab = "Temperature")
h <- hist(aq_temp, main = "Temperature",xlab = "Temperature Histogram",col = "green")
#Get the bars
highest_freq <- max(h$counts)       #34
highest_bar <- which.max(h$counts)  # 6th bar
left_bar <- highest_bar - 1         # 5th bar
right_bar <- highest_bar + 1        # 7th bar
x_left1 <- h$breaks[left_bar + 1]
x_right1 <- h$breaks[max_freq_index + 1]
y_max <- max(h$counts)
y_left1 <- h$counts[left_bar]
y_right1 <- h$counts[max_freq_index]
segments(x_left1, y_left1, x_right1, y_right1, col = "blue")
segments(x_left1, y_left1, x_right1, y_right1, col = "red")
# plotting 1st diagonal line
# hint 9: Draw another diagonal line from other edge of the largest bar to the tip of of the opposite adjacent bar
x_left2 <- h$breaks[max_freq_index] # Other edge of the largest bar
x_right2 <- h$breaks[right_bin] # Tip of the opposite adjacent bar
y_left2 <- hi$counts[max_freq_index]
y_right2 <- h$counts[right_bin]
y_left2 <- h$counts[max_freq_index]
y_right2 <- h$counts[right_bin]
# Calculating coordinates for the diagonal line from the other edge of the largest bar to the tip of the opposite adjacent bar
segments(x_left1, y_left1, x_right1, y_right1, col = "blue")
segments(x_left2, y_left2, x_right2, y_right2, col = "blue")
# Calculating coordinates for the diagonal line from the other edge of the largest bar to the tip of the opposite adjacent bar
segments(x_left2, y_left2, x_right2, y_right2, col = "blue")
segments(x_left1, y_left1, x_right1, y_right1, col = "red")
# Calculating coordinates for the diagonal line from the other edge of the largest bar to the tip of the opposite adjacent bar
segments(x_left2, y_left2, x_right2, y_right2, col = "blue")
#hint 10 : Intersection of the two diagonal lines in the x-axis in the mode
slope1 <- (y_right1 - y_left1) / (x_right1 - x_left1)
slope2 <- (y_right2 - y_left2) / (x_right2 - x_left2)
#Calculate the slopes of the two lines
intercept1 <- y_left1 - slope1 * x_left1
intercept2 <- y_left2 - slope2 * x_left2
#Calculate the y-intercepts of the two lines
intersection_x <- (intercept2 - intercept1) / (slope1 - slope2)
intersection_x
## [1] 80.33333
abline(v = intersection_x, col = "red", lty = 2)
x_left1 <- h$breaks[left_bar + 1]
x_right1 <- h$breaks[highest_bar + 1]
y_max <- max(h$counts)
y_left1 <- h$counts[left_bar]
y_right1 <- h$counts[highest_bar]
segments(x_left1, y_left1, x_right1, y_right1, col = "red")
# plotting 1st diagonal line
# hint 9: Draw another diagonal line from other edge of the largest bar to the tip of of the opposite adjacent bar
x_left2 <- h$breaks[highest_bar] # Other edge of the largest bar
x_right2 <- h$breaks[right_bin] # Tip of the opposite adjacent bar
y_left2 <- h$counts[highest_bar]
y_right2 <- h$counts[right_bin]
# Calculating coordinates for the diagonal line from the other edge of the largest bar to the tip of the opposite adjacent bar
segments(x_left2, y_left2, x_right2, y_right2, col = "blue")
#hint 10 : Intersection of the two diagonal lines in the x-axis in the mode
slope1 <- (y_right1 - y_left1) / (x_right1 - x_left1)
slope2 <- (y_right2 - y_left2) / (x_right2 - x_left2)
#Calculate the slopes of the two lines
intercept1 <- y_left1 - slope1 * x_left1
intercept2 <- y_left2 - slope2 * x_left2
#Calculate the y-intercepts of the two lines
intersection_x <- (intercept2 - intercept1) / (slope1 - slope2)
intersection_x
segments(x_left1, y_left1, x_right1, y_right1, col = "blue")
segments(x_left2, y_left2, x_right2, y_right2, col = "blue")
abline(v = intersection_x, col = "red", lty = 2)
########### WORK 2 #################
hist(aq_temp, main = "Temperature",col="green",xlab = "Temperature")
h <- hist(aq_temp, main = "Temperature",xlab = "Temperature Histogram",col = "green")
#Get the bars
highest_freq <- max(h$counts)       #34
highest_bar <- which.max(h$counts)  # 6th bar
left_bar <- highest_bar - 1         # 5th bar
right_bar <- highest_bar + 1        # 7th bar
x_left1 <- h$breaks[left_bar + 1]
x_right1 <- h$breaks[highest_bar + 1]
y_max <- max(h$counts)
y_left1 <- h$counts[left_bar]
y_right1 <- h$counts[highest_bar]
segments(x_left1, y_left1, x_right1, y_right1, col = "red")
# plotting 1st diagonal line
# hint 9: Draw another diagonal line from other edge of the largest bar to the tip of of the opposite adjacent bar
x_left2 <- h$breaks[highest_bar] # Other edge of the largest bar
x_right2 <- h$breaks[right_bin] # Tip of the opposite adjacent bar
y_left2 <- h$counts[highest_bar]
y_right2 <- h$counts[right_bin]
# Calculating coordinates for the diagonal line from the other edge of the largest bar to the tip of the opposite adjacent bar
segments(x_left2, y_left2, x_right2, y_right2, col = "blue")
#hint 10 : Intersection of the two diagonal lines in the x-axis in the mode
slope1 <- (y_right1 - y_left1) / (x_right1 - x_left1)
slope2 <- (y_right2 - y_left2) / (x_right2 - x_left2)
#Calculate the slopes of the two lines
intercept1 <- y_left1 - slope1 * x_left1
intercept2 <- y_left2 - slope2 * x_left2
#Calculate the y-intercepts of the two lines
intersection_x <- (intercept2 - intercept1) / (slope1 - slope2)
intersection_x
segments(x_left1, y_left1, x_right1, y_right1, col = "blue")
segments(x_left2, y_left2, x_right2, y_right2, col = "blue")
abline(v = intersection_x, col = "red", lty = 2)
segments(x_left1, y_left1, x_right1, y_right1, col = "red")
# Calculating coordinates for the diagonal line from the other edge of the largest bar to the tip of the opposite adjacent bar
segments(x_left2, y_left2, x_right2, y_right2, col = "blue")
abline(v = intersection_x, col = "black", lty = 2)
########### WORK 2 #################
hist(aq_temp, main = "Temperature",col="white",xlab = "Temperature")
h <- hist(aq_temp, main = "Temperature",xlab = "Temperature Histogram",col = "white")
segments(x_left1, y_left1, x_right1, y_right1, col = "red")
# Calculating coordinates for the diagonal line from the other edge of the largest bar to the tip of the opposite adjacent bar
segments(x_left2, y_left2, x_right2, y_right2, col = "blue")
abline(v = intersection_x, col = "black", lty = 2)
abline(v = intersection_x, col = "green", lty = 2)
abline(v = intersection_x, col = "red", lty = 2)
segments(x_left1, y_left1, x_right1, y_right1, col = "green")
segments(x_left1, y_left1, x_right1, y_right1, col = "darkgreen")
y_right1
y_max
########### WORK 2 #################
hist(aq_temp, main = "Temperature",col="white",xlab = "Temperature")
h <- hist(aq_temp, main = "Temperature",xlab = "Temperature Histogram",col = "white")
#Get the bars
highest_freq <- max(h$counts)       #34
highest_bar <- which.max(h$counts)  # 6th bar
left_bar <- highest_bar - 1         # 5th bar
right_bar <- highest_bar + 1        # 7th bar
x_left1 <- h$breaks[left_bar + 1]
left_bar_count <- h$counts[left_bar]
x_right1 <- h$breaks[highest_bar + 1]
highest_bar_count <- h$counts[highest_bar]
segments(x_left1, left_bar_count, x_right1, y_right1, col = "darkgreen")
# plotting 1st diagonal line
# hint 9: Draw another diagonal line from other edge of the largest bar to the tip of of the opposite adjacent bar
x_left2 <- h$breaks[highest_bar] # Other edge of the largest bar
x_right2 <- h$breaks[right_bin] # Tip of the opposite adjacent bar
y_left2 <- h$counts[highest_bar]
y_right2 <- h$counts[right_bin]
# Calculating coordinates for the diagonal line from the other edge of the largest bar to the tip of the opposite adjacent bar
segments(x_left2, y_left2, x_right2, y_right2, col = "blue")
#hint 10 : Intersection of the two diagonal lines in the x-axis in the mode
slope1 <- (highest_bar_count - left_bar_count) / (x_right1 - x_left1)
slope2 <- (y_right2 - y_left2) / (x_right2 - x_left2)
#Calculate the slopes of the two lines
intercept1 <- left_bar_count - slope1 * x_left1
intercept2 <- y_left2 - slope2 * x_left2
#Calculate the y-intercepts of the two lines
intersection_x <- (intercept2 - intercept1) / (slope1 - slope2)
intersection_x
abline(v = intersection_x, col = "red", lty = 2)
aq_temp <- airquality$Temp
########### WORK 2 #################
hist(aq_temp, main = "Temperature",col="white",xlab = "Temperature")
h <- hist(aq_temp, main = "Temperature",xlab = "Temperature Histogram",col = "white")
#Get the bars
highest_freq <- max(h$counts)       #34
highest_bar <- which.max(h$counts)  # 6th bar
left_bar <- highest_bar - 1         # 5th bar
right_bar <- highest_bar + 1        # 7th bar
x_left1 <- h$breaks[left_bar + 1]
left_bar_count <- h$counts[left_bar]
x_right1 <- h$breaks[highest_bar + 1]
highest_bar_count <- h$counts[highest_bar]
segments(x_left1, left_bar_count, x_right1, highest_bar_count, col = "darkgreen")
# plotting 1st diagonal line
# hint 9: Draw another diagonal line from other edge of the largest bar to the tip of of the opposite adjacent bar
x_left2 <- h$breaks[highest_bar] # Other edge of the largest bar
x_right2 <- h$breaks[right_bar] # Tip of the opposite adjacent bar
highest_bar_count <- h$counts[highest_bar]
right_bar_count <- h$counts[right_bar]
# Calculating coordinates for the diagonal line from the other edge of the largest bar to the tip of the opposite adjacent bar
segments(x_left2, y_left2, x_right2, y_right2, col = "blue")
# Calculating coordinates for the diagonal line from the other edge of the largest bar to the tip of the opposite adjacent bar
segments(x_left2, right_bar, x_right2, highest_bar_count, col = "blue")
# Calculating coordinates for the diagonal line from the other edge of the largest bar to the tip of the opposite adjacent bar
segments(x_left2, right_bar_count, x_right2, highest_bar_count, col = "blue")
# Calculating coordinates for the diagonal line from the other edge of the largest bar to the tip of the opposite adjacent bar
segments(x_left2, highest_bar_count, x_right2, right_bar_count, col = "blue")
########### WORK 2 #################
hist(aq_temp, main = "Temperature",col="white",xlab = "Temperature")
segments(x_left1, left_bar_count, x_right1, highest_bar_count, col = "darkgreen")
# Calculating coordinates for the diagonal line from the other edge of the largest bar to the tip of the opposite adjacent bar
segments(x_left2, highest_bar_count, x_right2, right_bar_count, col = "blue")
#hint 10 : Intersection of the two diagonal lines in the x-axis in the mode
slope1 <- (highest_bar_count - left_bar_count) / (x_right1 - x_left1)
slope2 <- (right_bar_count - highest_bar_count) / (x_right2 - x_left2)
#Calculate the slopes of the two lines
intercept1 <- left_bar_count - slope1 * x_left1
intercept2 <- highest_bar_count - slope2 * x_left2
#Calculate the y-intercepts of the two lines
intersection_x <- (intercept2 - intercept1) / (slope1 - slope2)
intersection_x
abline(v = intersection_x, col = "red", lty = 2)
ogive_intersection <- hist_breaks[which(less_than_ogive >= more_than_ogive)[1]]
getwd()
setwd("C:/Users/kaush/OneDrive - Tribhuvan University/MDS/FIRST/R/Assignment/Project3")
sna <- read.csv("Kaushal Khatiwada - SNA_School.csv")
s <- sna[, 1:2]
net <- graph_from_data_frame(s, directed = T)
vcount(net)   # 52 vertices
library(igraph)
sna <- read.csv("Kaushal Khatiwada - SNA_School.csv")
s <- sna[, 1:2]
net <- graph_from_data_frame(s, directed = T)
vcount(net)   # 52 vertices
ecount(net)   # 290 Edges
degree(net)
degree_table <- table(degree(net))
hist(degree(net),
main = "Degree",
xlab = "Degree",
ylab = "Frequency",
col= "red")
plot(net,
vertex.color = "green",
edge.arrow.size = 0.1,
vertex.label.cex = 0.8)
set/seed(13)
plot(net,
vertex.color = "green",
edge.arrow.size = 0.1,
vertex.label.cex = 0.8)
plot(net,
layout = layout_with_kk,
main = "Network Diagram (Kamada-Kawai Layout)",
vertex.color = "green",
edge.arrow.size = 0.1,
vertex.label.cex = 0.8)
hubs <- hub_score(net)$vector
hubs
plot(net,
layout = layout_with_kk,
main = "Network Diagram (Kamada-Kawai Layout)",
vertex.color = "green",
vertex.size=V(net)$degree,
edge.arrow.size = 0.1,
vertex.label.cex = 0.8)
plot(net,
layout = layout_with_kk,
main = "Network Diagram (Kamada-Kawai Layout)",
vertex.color = "green",
vertex.size=V(net)$degree,
edge.arrow.size = 0.1,
vertex.label.cex = 0.8)
plot(net,
layout = layout_with_kk,
main = "Network Diagram (Kamada-Kawai Layout)",
vertex.color = "green",
vertex.size=V(net)$degree,
edge.arrow.size = 0.1,
vertex.label.cex = 0.8)
plot(net,
layout = layout_with_kk,
main = "Network Diagram (Kamada-Kawai Layout)",
vertex.color = "green",
vertex.size=V(net)$degree*0.4,
edge.arrow.size = 0.1,
vertex.label.cex = 0.8)
plot(net,
layout = layout_with_kk,
main = "Network Diagram (Kamada-Kawai Layout)",
vertex.color = rainbow(52),
vertex.size=V(net)$degree*0.4,
edge.arrow.size = 0.1,
vertex.label.cex = 0.8)
vcount(net)   # 52 vertices
v(net)   # 52 vertices
V(net)   # 52 vertices
E(net)   # 290 Edges
plot(net,
layout = layout_with_kk,
main = "Network Diagram (Kamada-Kawai Layout)",
vertex.color = rainbow(52),
vertex.size=V(net)$degree*0.4,
edge.arrow.size = 0.1,
vertex.label.cex = 0.8)
plot(net,
layout = layout.kamada.kawai,
main = "Network Diagram (Kamada-Kawai Layout)",
vertex.color = rainbow(52),
vertex.size=V(net)$degree*0.4,
edge.arrow.size = 0.1,
vertex.label.cex = 0.8)
V(net)
V(net)$degree
V(net)   # 52 vertices
V(net)$labels
net <- graph_from_data_frame(s, directed = T)
V(net)   # 52 vertices
E(net)   # 290 Edges
degree(net)
V(net)$degreee
V(net)$degree
plot(net,
layout = layout.kamada.kawai,
main = "Network Diagram (Kamada-Kawai Layout)",
vertex.color = rainbow(52),
edge.arrow.size = 0.1,
vertex.label.cex = 0.8)
plot(net,
layout = layout.kamada.kawai,
main = "Network Diagram (Kamada-Kawai Layout)",
vertex.color = rainbow(13),
edge.arrow.size = 0.1,
vertex.label.cex = 0.8)
# Hubs is a node with most outer edges
hubs <- hub_score(net)$vector
hubs
plot(net,
main = "Hubs",
vertex.color = rainbow(13),
edge.arrow.size = 0.1,
vertex.label.cex = 0.8)
plot(net,
main = "Hubs",
vertex.color = rainbow(13),
vertex.size = hubs * 30,
edge.arrow.size = 0.1,
vertex.label.cex = 0.8)
plot(net,
main = "Authority",
vertex.color = rainbow(13),
vertex.size = authorities * 30,
edge.arrow.size = 0.1,
vertex.label.cex = 0.8)
# Authorities is a node with most inner edges
authorities <- authority.score(net)$vector
plot(net,
main = "Authority",
vertex.color = rainbow(13),
vertex.size = authorities * 30,
edge.arrow.size = 0.1,
vertex.label.cex = 0.8)
# Community is form with densely connected noede
net <- graph.data.frame(y, directed = F)
# Community is form with densely connected noede
net <- graph_from_data_frame(y, directed = F)
# Community is form with densely connected noede
net <- graph_from_data_frame(s, directed = F)
community_cluster <- cluster_edge_betweenness(net)
plot(cnet,
net,
vetex.size = 10,
vertex.label.cex = 0.8
)
plot(community_cluster,
net,
vetex.size = 10,
vertex.label.cex = 0.8
)
less_than_ogive <- cumsum(freq_table)
data(airquality)
head(airquality)
str(airquality)
num_bins <- ceiling(log2(length(airquality$Temp)))
hist_breaks <- seq(min(airquality$Temp,
na.rm = TRUE),
max(airquality$Temp,
na.rm = TRUE),
length.out = num_bins)
print(hist_breaks)
temp_freq <- cut(airquality$Temp,
breaks = hist_breaks,
include.lowest = TRUE)
freq_table <- table(temp_freq)
print(freq_table)
less_than_ogive <- cumsum(freq_table)
more_than_ogive <- rev(cumsum(rev(freq_table)))
plot(hist_breaks[-1],
less_than_ogive,
type = "l",
col = "blue",
xlab = "Temperature",
ylab = "Frequency",
main = "Ogive Plot",
ylim = c(0,150))
lines(hist_breaks[-1],
more_than_ogive,
type = "l",
col = "red")
ogive_intersection <- hist_breaks[which(less_than_ogive >= more_than_ogive)[1]]
abline(v = 81.75,
col = "green",
lty = 2)
legend("topright",
legend = c("Less Than Ogive", "More Than Ogive", "Intersection"),
col = c("blue", "red", "green"),
lty = c(1, 1, 2))
cumsum(f)
aq_temp <- airquality$Temp
High <- max(aq_temp)  # max value
Low <- min(aq_temp)  # min value
N = length(aq_temp)  # number of observation
No_of_bins <- round(1 + 3.322 *log10(N))
# Calculate class intervals
Size <- round((High - Low)/No_of_bins)   # 8 bins with class interval 5
class_intervals <- seq(Low, High, by = Size)  # 56 61 66 71 76 81 86 91 96
#Frequency
f <- table(cut(aq_temp, breaks = class_intervals))
# Get frequency for less than ogive
less_than_ogive <- cumsum(f)
# Get frequency for more than ogive
more_than_ogive <- rev(cumsum(rev(f)))
# Plot less than and more than ogives
plot(class_intervals[-1],
less_than_ogive,
type = "o",
col = "blue",
xlab = "Temperature",
xlim = c(50,100),
ylab = "Cumulative Frequency",
main = "Ogive for Temperature")
points(class_intervals[-length(class_intervals)],
more_than_ogive,
type = "o",
col = "red")
legend("topright", legend = c("Less than Ogive", "More than Ogive"), col = c("blue", "red"),
lty = c(1, 1),lwd = 2,cex = 0.6)
