t.test(mpg ~ am, var.equal = T, data = df)
t.test(mpg ~ am, var.equal = T, data = df)
mpg <- round(runif(200,min = 10 ,max = 50),2)
am <- factor(sample(c(0,1),200,replace = TRUE),levels = c(0,1),labels = c('Automatic','Manual'))
wt <- round(runif(200,min =1 ,max = 10),2)
hp <- sample(125:400,200,replace = TRUE)
df <- data.frame(mpg,am,wt,hp)
t.test(mpg ~ am, var.equal = T, data = df)
with(mtcars, shapiro.test(mpg[gear
== 3]))
with(mtcars, shapiro.test(mpg[gear
== 4]))
with(mtcars, shapiro.test(mpg[gear
== 5]))
library(car)
leveneTest(mpg ~ gear, data=mtcars)
leveneTest(mpg ~ gear, data=mtcars)
mtcars
library(car)
leveneTest(mpg ~ gear, data=mtcars)
leveneTest(mpg ~ as.factor(gear), data=mtcars)
summary(aov(mpg ~ gear, data = mtcars))
TukeyHSD (aov(mpg ~ gear, data = mtcars))
TukeyHSD(aov(mpg ~ gear, data = mtcars))
TukeyHSD(aov(mpg ~ factor(gear), data = mtcars))
summary(aov(mpg ~ factor(gear), data = mtcars))
TukeyHSD(aov(mpg ~ factor(gear), data = mtcars))
df
setwd("C:\Users\pawan\OneDrive\Desktop\21_Pawan")
setwd("C:\Users\pawan\OneDrive\Desktop\21_Pawan")
setwd("C:/Users/pawan/OneDrive/Desktop/21_Pawan")
age <- sample(10:99,200,replace = TRUE)
sex <- sample(c(0,1),200,replace = TRUE,levels = c(0,1),labels = c('Male','Female'))
sex <- factor(sample(c(0,1),200,replace = TRUE,levels = c(0,1),labels = c('Male','Female')))
status <-factor(sample(c(0,1,2),replace = TRUE),levels = c(0,1,2),labels = c('Low' , 'Medium','High'))
sex <- factor(sample(c(0,1),200,replace = TRUE,levels = c(0,1)),labels = c('Male','Female'))
status <-factor(sample(c(0,1,2),replace = TRUE),levels = c(0,1,2),labels = c('Low' , 'Medium','High'))
sex <- factor(sample(c(0,1),200,replace = TRUE),levels = c(0,1),labels = c('Male','Female'))
status <-factor(sample(c(0,1,2),replace = TRUE),levels = c(0,1,2),labels = c('Low' , 'Medium','High'))
status <-factor(sample(c(0,1,2),200,replace = TRUE),levels = c(0,1,2),labels = c('Low' , 'Medium','High'))
bmi <- runif(200,min = 14,max = 38)
set.seed(21)
age <- sample(10:99,200,replace = TRUE)
sex <- factor(sample(c(0,1),200,replace = TRUE),levels = c(0,1),labels = c('Male','Female'))
status <-factor(sample(c(0,1,2),200,replace = TRUE),levels = c(0,1,2),labels = c('Low' , 'Medium','High'))
bmi <- runif(200,min = 14,max = 38)
df <- data.frame (age,sex,status,bmi)
head(df)
bmi <- round(runif(200,min = 14,max = 38),2)
df <- data.frame (age,sex,status,bmi)
head(df)
knitr::opts_chunk$set(echo = TRUE)
# create a dataset
set.seed(21)
age <- sample(10:99,200,replace = TRUE)
sex <- factor(sample(c(0,1),200,replace = TRUE),levels = c(0,1),labels = c('Male','Female'))
status <-factor(sample(c(0,1,2),200,replace = TRUE),levels = c(0,1,2),labels = c('Low' , 'Medium','High'))
bmi <- round(runif(200,min = 14,max = 38),2)
df <- data.frame (age,sex,status,bmi)
head(df)
# create scatterplot
library(ggplot2)
ggplot(data = df,mapping = aes(x = age , y= bmi),col = 'blue')+
geom_point()
# create a scatterplot
# create scatterplot
library(ggplot2)
ggplot(data = df,mapping = aes(x = age , y= bmi),col = 'blue')+
geom_point()
# create a scatterplot
library(ggplot2)
ggplot(data = df,mapping = aes(x = age , y= bmi),col = 'blue')+
geom_point()
?geom_bar
ggplot(data = df,mapping = aes(x = age))+
geom_bar()
?geom_bar
ggplot(data = df,mapping = aes(x = age))+
geom_histogram(binwidth = 1,bins = 15)
aq <- airquality
head(aq)
str(aq)
# gof test for temp variable
# test normality
# using confirmative test : kolmogorov-smirov test for sample size 153
ks.test(aq$Temp)
# gof test for temp variable
# test normality
# using confirmative test : kolmogorov-smirov test for sample size 153
ks.test(aq$Temp,'pnorm')
# dataset
aq <- airquality
head(aq)
str(aq)
1.
# gof test for temp variable
# test normality
# using confirmative test : kolmogorov-smirov test for sample size 153
ks.test(aq$Temp,'pnorm')
1.
# gof test for temp variable
# test normality
# using confirmative test : kolmogorov-smirov test for sample size 153
ks.test(aq$Temp,'pnorm')
shiapiro.test(aq$Temp)
shapiro.test(aq$Temp)
head(aq)
view(aq)
View(aq)
library(caret)
levene.test(temp~month,data = aq)
leveneTest(temp~month,data = aq)
leveneTest(Temp~Month,data = aq)
leveneTest(Temp~factor(Month),data = aq)
2.
library(caret)
leveneTest(Temp~factor(Month),data = aq)
Tukey(aov(Temp~Month,data = aq))
TukeyHSD(aov(Temp~Month,data = aq))
TukeyHSD(aov(Temp~factor(Month),data = aq))
TukeyHSD(aov(Temp~factor(Month),data = aq))
?leveneTest()
library(car)
leveneTest(Temp~factor(Month),data = aq)
library(car)
# Data partition :
#Do random sampling to divide the cases into two independent samples
ind <- sample(2, nrow(Arrests), replace = T, prob = c(0.8, 0.2))
#Data partition
train.data <- data[ind==1,]
#Data partition
train.data <- Arrests[ind==1,]
test.data <- Arrests[ind==2,]
knitr::opts_chunk$set(echo = TRUE)
library(car)
# Data partition :
#Do random sampling to divide the cases into two independent samples
ind <- sample(2, nrow(Arrests), replace = T, prob = c(0.8, 0.2))
#Data partition
train.data <- Arrests[ind==1,]
test.data <- Arrests[ind==2,]
# Logistic Regression
model <- glm(am ~., data = train.data, family = binomial)
# Logistic Regression
model <- glm(released ~ colour,age,sex,employed,citizen, data = train.data, family = binomial)
View(Arrests)
# Logistic Regression
model <- glm(released ~ colour,age,sex,employed,citizen, data = train.data, family = binomial)
# Logistic Regression
model <- glm(released ~ colour,age,sex,citizen, data = train.data, family = binomial)
# Logistic Regression
model <- glm(released ~ colour, data = train.data, family = binomial)
library(car)
# Data partition :
#Do random sampling to divide the cases into two independent samples
ind <- sample(2, nrow(Arrests), replace = T, prob = c(0.8, 0.2))
#Data partition
train.data <- Arrests[ind==1,]
test.data <- Arrests[ind==2,]
# Logistic Regression
model <- glm(released ~ colour,sex , data = train.data, family = binomial)
library(car)
set.seed(21)
# Data partition :
#Do random sampling to divide the cases into two independent samples
ind <- sample(2, nrow(Arrests), replace = T, prob = c(0.8, 0.2))
#Data partition
train.data <- Arrests[ind==1,]
test.data <- Arrests[ind==2,]
# Logistic Regression
model <- glm(released ~ c(colour,sex) , data = train.data, family = binomial)
# Logistic Regression
model <- glm(released ~ colour+age+sex+employed+citizen , data = train.data, family = binomial)
# Naive Bayes
library(e1071)
model.nb <- naiveBayes(  released ~ colour+age+sex+employed+citizen ,data = train.data)
# Naive Bayes
library(e1071)
model.nb <- naiveBayes(  released ~ colour+age+sex+employed+citizen ,data = train.data)
predictions <- predict(model, newdata = test.data, type = "response")
#prediction to binary
# Convert predictions to binary values (0/1)
predictions_binary <- as.numeric(ifelse(predictions > 0.5, 1, 0))
predictions <- predict(model, newdata = test.data, type = "response")
#prediction to binary
# Convert predictions to binary values (0/1)
predictions_binary <- as.numeric(ifelse(predictions > 0.5, 1, 0))
head(predictions)
predictions <- predict(model, newdata = test.data, type = "response")
#prediction to binary
# Convert predictions to binary values (0/1)
predictions_binary <- as.numeric(ifelse(predictions > 0.5, 1, 0))
#Get the confusion matrix, sensitivity, specificity of the predicted model
conf_mat <- table(test.data$released, predictions_binary)
conf_mat
predictions <- predict(model, newdata = test.data, type = "response")
#prediction to binary
# Convert predictions to binary values (0/1)
predictions_binary <- as.numeric(ifelse(predictions > 0.5, 1, 0))
library(caret)
predicted <-
factor(ifelse(predictions>0.5,1,0))
reference <- factor(data$Survived)
predictions <- predict(model, newdata = test.data, type = "response")
#prediction to binary
# Convert predictions to binary values (0/1)
predictions_binary <- as.numeric(ifelse(predictions > 0.5, 1, 0))
library(caret)
predicted <-
factor(ifelse(predictions>0.5,1,0))
reference <- factor(Arrests$released)
confusionMatrix(predicted, reference)
predictions <- predict(model, newdata = test.data, type = "response")
#prediction to binary
# Convert predictions to binary values (0/1)
predictions_binary <- as.numeric(ifelse(predictions > 0.5, 1, 0))
library(caret)
predicted <-
factor(ifelse(predictions>0.5,1,0))
reference <- (Arrests$released)
confusionMatrix(predicted, reference)
predictions <- predict(model, newdata = test.data, type = "response")
#prediction to binary
# Convert predictions to binary values (0/1)
predictions_binary <- as.numeric(ifelse(predictions > 0.5, 1, 0))
#Get the confusion matrix
conf_mat <- table(test.released, predictions_binary)
predictions <- predict(model, newdata = test.data, type = "response")
#prediction to binary
# Convert predictions to binary values (0/1)
predictions_binary <- as.numeric(ifelse(predictions > 0.5, 1, 0))
#Get the confusion matrix
conf_mat <- table(test.data, predictions_binary)
predictions <- predict(model, newdata = test.data, type = "response")
#prediction to binary
# Convert predictions to binary values (0/1)
predictions_binary <- as.numeric(ifelse(predictions > 0.5, 1, 0))
#Get the confusion matrix
conf_mat <- table(test.data$released, predictions_binary)
conf_mat
# Predictions from logistic model
predictions <- predict(model, newdata = test.data, type = "response")
#prediction to binary
# Convert predictions to binary values (0/1)
predictions_binary <- as.numeric(ifelse(predictions > 0.5, 1, 0))
#Get the confusion matrix
conf_mat <- table(test.data$released, predictions)
conf_mat
# Predictions from logistic model
predictions <- predict(model, newdata = test.data, type = "response")
#prediction to binary
# Convert predictions to binary values (0/1)
predictions_binary <- as.numeric(ifelse(predictions > 0.5, 1, 0))
#Get the confusion matrix
conf_mat <- table(test.data$released, predictions_binary)
conf_mat
y_pred <- predict(model.nb,newdata = test.data)
cm <- table(test.data$released ,y-predict)
y_pred <- predict(model.nb,newdata = test.data)
cm <- table(test.data$released,y-predict)
y_pred <- predict(model.nb,newdata = test.data)
cm <- table(test.data$released,y_predict)
y_pred <- predict(model.nb,newdata = test.data)
cm <- table(test.data$released,y_pred)
y_pred <- predict(model.nb,newdata = test.data)
cm <- table(test.data$released,y_pred)
y_pred <- predict(model.nb,newdata = test.data)
cm <- table(test.data$released,y_pred)
cm
# Logistic Regression
model <- glm(released ~ colour+age+sex+employed+citizen , data = train.data, family = binomial)
```
```{r warning=FALSE}
# Naive Bayes
library(e1071)
model.nb <- naiveBayes(  released ~ colour+age+sex+employed+citizen ,data = train.data)
# Predictions from logistic model
predictions <- predict(model, newdata = test.data, type = "response")
#prediction to binary
# Convert predictions to binary values (0/1)
predictions_binary <- as.numeric(ifelse(predictions > 0.5, 1, 0))
#Get the confusion matrix
conf_mat <- table(test.data$released, predictions_binary)
conf_mat
#Get the confusion matrix
conf_mat <- table(factor(predictions_binary, levels = c(0, 1)), test.data$released)
conf_mat
# Predictions from logistic model
predictions <- predict(model, newdata = test.data, type = "response")
#prediction to binary
# Convert predictions to binary values (0/1)
predictions_binary <- as.numeric(ifelse(predictions > 0.5, 1, 0))
#Get the confusion matrix
conf_mat <- table(factor(predictions_binary, levels = c(0, 1)), test.data$released)
conf_mat
?stat
iris <- iris[,c(1,2,3,4)]
iris
iris_4 <- iris[,c(1,2,3,4)]
iris_4
knitr::opts_chunk$set(echo = TRUE)
# Data set
iris_4 <- iris[,c(1,2,3,4)]
iris_4
# Data set
iris <- iris[,c(1,2,3,4)]
head(iris)
#library
library(ClusterR)
library(cluster)
set.seed(21)
kmeans.2 <- kmeans(iris,centers =2 , nstart = 20)
kmeans.2
set.seed(21)
kmeans2 <- kmeans(iris,centers =2 , nstart = 20)
kmeans2
set.seed(21)
kmeans3 <- kmeans(iris,centers =3 , nstart = 20)
kmeans3
plot(x,col=(kmeans3$cluster+1),main="k=3",xlab = "",ylab="",pch=20,cex=2)
plot(iris1,col=(kmeans3$cluster+1),main="k=3",xlab = "",ylab="",pch=20,cex=2)
plot(iris,col=(kmeans3$cluster+1),main="k=3",xlab = "",ylab="",pch=20,cex=2)
plot(iris,col=(kmeans3$cluster+1),main="k=3",pch=20,cex=2)
cm <- table(iris$Species,kmeans3$cluster)
